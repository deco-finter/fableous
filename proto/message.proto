syntax = "proto3";
package proto;

// WSMessageType defines the type of the message.
enum WSMessageType {
  UNKNOWN = 0;
  ERROR = 1;
  PING = 2;
  PAINT = 3;
  FILL = 4;
  TEXT = 5;
  AUDIO = 6;
  CHECKPOINT = 7;
  UNDO = 8;
  CURSOR = 9;
  ACHIEVEMENT = 10;
  JOIN = 11;
  CONTROL = 12;
  IMAGE = 13;
  MANIFEST = 14;
}

// ControllerRole defines the type of controller roles.
enum ControllerRole {
  NONE = 0;
  HUB = 1;
  STORY = 2;
  CHARACTER = 3;
  BACKGROUND = 4;
}

// WSMessage wraps all WebSocket messages sent between the client and server.
message WSMessage {
  WSMessageType type = 1; // type of message
  ControllerRole role = 2; // origin of message
  oneof data {
    WSPaintMessageData paint = 3;
    WSControlMessageData control = 4;
    WSJoinMessageData join = 5;
    WSAchievementMessageData achievement = 6;
    WSErrorMessageData error = 7;
  }
  int64 timestamp = 8; // used during benchmarking
}

// WSPaintMessageData contains the data for a paint message.
// All coordinates (x1, y1, x2, y2) and width are normalized to the range [0, 1].
message WSPaintMessageData {
  float x1 = 1;
  float y1 = 2;
  float x2 = 3;
  float y2 = 4;
  int32 id = 5;
  string text = 6; // can contain plaintext or base64 payload depending on WSMessageType
  string color = 7;
  float width = 8;
}

// WSControlMessageData contains the data for a control message.
message WSControlMessageData {
  string classroom_token = 1;
  string classroom_id = 2;
  string session_id = 3;
  int32 current_page = 4;
  bool next_page = 5; // true if hub pushes next page
  bool help = 6; // true if controller requests help
  bool done = 7; // true if controller marks done
  ControllerRole clear = 8; // role to clear
  ControllerRole kick = 9; // role to kick
}

// WSAchievementMessageData contains the data for an achievement message.
// Must be in sync with Achievements in fableous-fe.
message WSAchievementMessageData {
  float all_color = 1;
  float five_text = 2;
  float ten_text = 3;
  float one_page = 4;
  float three_page = 5;
  float five_page = 6;
}

// WSJoinMessageData contains the data for a join message.
message WSJoinMessageData {
  ControllerRole role = 1;
  string name = 2;
  bool joining = 3; // true if joining, false if leaving
}

// WSErrorMessageData contains the data for an error message.
message WSErrorMessageData {
  string error = 1;
}
